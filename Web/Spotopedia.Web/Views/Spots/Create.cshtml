@using Spotopedia.Data.Models.Enumerations
@model Spotopedia.Web.ViewModels.Spots.CreateSpotInputModel


@*@{
    ViewData["Title"] = "Add New Spot";
}

<h3>@ViewData["Title"]</h3>
<hr>*@

<style>

    @@charset "UTF-8";

    .form {
        width: 500px;
        margin: 5% auto;
    }

    .form__container {
        position: relative;
        width: 100%;
        height: 100px;
        border: 2px dashed silver;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 18px;
        color: silver;
        margin-bottom: 5px;
    }

        .form__container.active {
            background-color: rgba(192, 192, 192, 0.2);
        }

    .form__file {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        cursor: pointer;
        opacity: 0;
    }

    .form__files-container {
        display: block;
        width: 100%;
        font-size: 0;
        margin-top: 20px;
    }

    .form__image-container {
        display: inline-block;
        width: 20%;
        height: 200px;
        margin-bottom: 10px;
        position: relative;
        align-content: center
    }

        .form__image-container:not(:nth-child(2n)) {
            margin-right: 2%;
        }

        .form__image-container:after {
            content: "✕";
            position: absolute;
            line-height: 50px;
            font-size: 30px;
            margin: auto;
            top: 0;
            right: 0;
            left: 0;
            text-align: center;
            font-weight: bold;
            color: #fff;
            background-color: rgba(0, 0, 0, 0.4);
            opacity: 0;
            transition: opacity 0.2s ease-in-out;
        }

        .form__image-container:hover:after {
            opacity: 1;
            cursor: pointer;
        }

    .form__image {
        -o-object-fit: contain;
        object-fit: contain;
        width: 100%;
        height: 100%;
    }

    .form {
        align-content: center
    }

      .container-body {
        width: 100%;
    }

      .btn-outline-primary {
          left:auto;
      }

</style>

<section class="inner_page_head">
    <div class="container_fuild">
        <div class="row">
            <div class="col-md-12">
                <div class="full">
                    <h3>Add New Spot</h3>
                </div>
            </div>
        </div>
    </div>
</section>

<form method="post" class="col-md-4 offset-md-4" enctype="multipart/form-data">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div>
        <label asp-for="Title"></label>
        <input style="text-transform: none" asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div>
        <label asp-for="Description"></label>
        <textarea asp-for="Description" class="form-control" rows="5" style="text-transform: none"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <p></p>
    <div>
        <span asp-validation-for="Type" class="text-danger"></span>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <label asp-for="Type" class="input-group-text">
                    <i class="fas fa-chevron-up"></i>
                </label>
            </div>
            <select asp-for="Type" class="form-control">
                <option selected disabled>Choose the type of the spot</option>
                @foreach (int spotType in Enum.GetValues(typeof(SpotType)))
                {
                    <option value="@spotType">@Enum.GetName(typeof(SpotType), spotType)</option>
                }
            </select>
        </div>
    </div>
    <div>
        <span asp-validation-for="KickOutLevel" class="text-danger"></span>

        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <label asp-for="KickOutLevel" class="input-group-text">
                    <i class="fas fa-chevron-up"></i>
                </label>
            </div>
            <select asp-for="KickOutLevel" class="form-control">
                <option selected disabled>Possibility to be kicked out from the spot</option>
                @foreach (int spotType in Enum.GetValues(typeof(KickOutLevel)))
                {
                    <option value="@spotType">@Enum.GetName(typeof(KickOutLevel), spotType)</option>
                }
            </select>
        </div>
    </div>
    <p></p>
    <div>
        <p></p>
        <fieldset class="gllpLatlonPicker">
            <label>Insert address or point it on the map</label>
            <input type="text" class="gllpSearchField" style="text-transform: none">
            <br>
            <input type="button" class="btn btn-outline-primary gllpSearchButton" value="Search" />
            <br>
            <br>
            @*<input type="button" class="gllpSearchButton" value="search">*@
            <div class="gllpMap">Google Maps</div>
            <input asp-for="Address.AddressName" type="hidden" class="gllpLocationName" value="" />
            <input asp-for="Address.Latitude" type="hidden" class="gllpLatitude" value="42.6851881" />
            <input asp-for="Address.Longitude" type="hidden" class="gllpLongitude" value="23.3190205" />
            <input type="hidden" class="gllpZoom" value="3" />
        </fieldset>
    </div>
    <p></p>

    <div>
        <label class="form__container" id="upload-container">
            Choose or Drag & Drop Photo
            <input class="form__file" id="upload-files" type="file" asp-for="Images" accept="image/*" multiple="multiple" />
        </label>
        <div class="form__files-container" id="files-list-container"></div>
    </div>

    <p></p>
    <div class=" float-right">
        <button type="submit" class="btn btn-outline-primary">Submit</button>
        <a id="cancelButton" asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
    </div>
    <div class="clearfix"></div>
</form>



@section Scripts {
    <script>
        const INPUT_FILE = document.querySelector('#upload-files');
        const INPUT_CONTAINER = document.querySelector('#upload-container');
        const FILES_LIST_CONTAINER = document.querySelector('#files-list-container');
        const FILE_LIST = [];
        let UPLOADED_FILES = [];

        const multipleEvents = (element, eventNames, listener) => {
            const events = eventNames.split(' ');

            events.forEach(event => {
                element.addEventListener(event, listener, false);
            });
        };

        const previewImages = () => {
            FILES_LIST_CONTAINER.innerHTML = '';
            if (FILE_LIST.length > 0) {
                FILE_LIST.forEach((addedFile, index) => {
                    const content = `
                <div class="form__image-container js-remove-image" data-index="${index}">
                  <img class="form__image" src="${addedFile.url}" alt="${addedFile.name}">
                </div>
              `;

                    FILES_LIST_CONTAINER.insertAdjacentHTML('beforeEnd', content);
                });
            } else {
                console.log('empty')
                INPUT_FILE.value = "";
            }
        }

        const fileUpload = () => {
            if (FILES_LIST_CONTAINER) {
                multipleEvents(INPUT_FILE, 'click dragstart dragover', () => {
                    INPUT_CONTAINER.classList.add('active');
                });

                multipleEvents(INPUT_FILE, 'dragleave dragend drop change blur', () => {
                    INPUT_CONTAINER.classList.remove('active');
                });

                INPUT_FILE.addEventListener('change', () => {
                    const files = [...INPUT_FILE.files];
                    console.log("changed")
                    files.forEach(file => {
                        const fileURL = URL.createObjectURL(file);
                        const fileName = file.name;
                        if (!file.type.match("image/")) {
                            alert(file.name + " is not an image");
                            console.log(file.type)
                        } else {
                            const uploadedFiles = {
                                name: fileName,
                                url: fileURL,
                            };

                            FILE_LIST.push(uploadedFiles);
                        }
                    });

                    console.log(FILE_LIST)//final list of uploaded files
                    previewImages();
                    UPLOADED_FILES = document.querySelectorAll(".js-remove-image");
                    removeFile();
                });
            }
        };

        const removeFile = () => {
            UPLOADED_FILES = document.querySelectorAll(".js-remove-image");

            if (UPLOADED_FILES) {
                UPLOADED_FILES.forEach(image => {
                    image.addEventListener('click', function () {
                        const fileIndex = this.getAttribute('data-index');

                        FILE_LIST.splice(fileIndex, 1);
                        previewImages();
                        removeFile();
                    });
                });
            } else {
                [...INPUT_FILE.files] = [];
            }
        };

        fileUpload();
        removeFile();
    </script>
}
