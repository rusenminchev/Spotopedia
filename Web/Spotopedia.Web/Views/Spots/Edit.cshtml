@using Spotopedia.Data.Models.Enumerations
@model Spotopedia.Web.ViewModels.Spots.EditSpotInputModel
@{
    ViewData["Title"] = "Edit spot";
}

<h1>@ViewData["Title"]</h1>

<style>
    @@charset "UTF-8";

    .form {
        width: 500px;
        margin: 5% auto;
    }

    .form__container {
        position: relative;
        width: 100%;
        height: 100px;
        border: 2px dashed silver;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 18px;
        color: silver;
        margin-bottom: 5px;
    }

        .form__container.active {
            background-color: rgba(192, 192, 192, 0.2);
        }

    .form__file {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        cursor: pointer;
        opacity: 0;
    }

    .form__files-container {
        display: block;
        width: 100%;
        font-size: 0;
        margin-top: 20px;
    }

    .form__image-container {
        display: inline-block;
        width: 20%;
        height: 200px;
        margin-bottom: 10px;
        position: relative;
        align-content: center
    }

        .form__image-container:not(:nth-child(2n)) {
            margin-right: 2%;
        }

        .form__image-container:after {
            content: "✕";
            position: absolute;
            line-height: 50px;
            font-size: 30px;
            margin: auto;
            top: 0;
            right: 0;
            left: 0;
            text-align: center;
            font-weight: bold;
            color: #fff;
            background-color: rgba(0, 0, 0, 0.4);
            opacity: 0;
            transition: opacity 0.2s ease-in-out;
        }

        .form__image-container:hover:after {
            opacity: 1;
            cursor: pointer;
        }

    .form__image {
        -o-object-fit: contain;
        object-fit: contain;
        width: 100%;
        height: 100%;
    }
</style>

<form method="post" id="editForm" enctype="multipart/form-data">
    <div class="form-group">
        <label asp-for="Title"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
   <div>   
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <label asp-for="Type" class="input-group-text">
                    <i class="fas fa-chevron-up"></i>
                </label>
            </div>
            <select asp-for="Type" class="form-control">
                <option selected disabled>Choose the type of the spot</option>
                @foreach (int spotType in Enum.GetValues(typeof(SpotType)))
                {
                    <option value="@spotType">@Enum.GetName(typeof(SpotType), spotType)</option>
                }
            </select>
        </div>
        <span asp-validation-for="Type" class="text-danger"></span>
    </div>
   <div>   
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <label asp-for="KickOutLevel" class="input-group-text">
                    <i class="fas fa-chevron-up"></i>
                </label>
            </div>
            <select asp-for="KickOutLevel" class="form-control">
                <option selected disabled>Choose the type of the spot</option>
                @foreach (int kickOutLevel in Enum.GetValues(typeof(SpotType)))
                {
                    <option value="@kickOutLevel">@Enum.GetName(typeof(KickOutLevel), kickOutLevel)</option>
                }
            </select>
        </div>
        <span asp-validation-for="KickOutLevel" class="text-danger"></span>
    </div>
    <p></p>
    <div>    
 <fieldset class="gllpLatlonPicker">
     <label>Location</label>
    <input type="text" class="gllpSearchField" >
    <input type="button" class="gllpSearchButton" value="search">
	<div class="gllpMap">Google Maps</div>
    <input asp-for="Address.AddressName" type="hidden" class="gllpLocationName" value="@Model.Address.AddressName"/>
	<input asp-for="Address.Latitude"   type="hidden" class="gllpLatitude" value="@Model.Address.Latitude"/>
	<input asp-for="Address.Longitude"  type="hidden" class="gllpLongitude" value="@Model.Address.Longitude"/>
	<input type="hidden" class="gllpZoom" value="15"/>
  </fieldset>
</div>

<br>
<div>
<label class="form__container" id="upload-container">Choose or Drag & Drop Photo
    <input class="form__file" id="upload-files" type="file" asp-for="Images" accept="image/*" multiple="multiple"/>
  </label>
  <div class="form__files-container" id="files-list-container"></div>
</div>

    <hr />
    <input type="hidden" asp-for="Id" />
@foreach (var img in Model.ExistingSpotImages)
{
    <p>@img.ImageUrl</p>
    <a asp-controller="SpotImages" asp-action="Delete" asp-route-id="@img.Id" asp-route-id="@Model.Id">&nbsp;&nbsp; Delete</a>
}
</form>



<button type="submit" class="btn btn-success" data-toggle="modal" data-target="#modalEdit">Save changes</button>



<!-- Modal -->
<div class="modal" id="modalEdit" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm edit</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    Do you confirm this changes?
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="editForm.submit()">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

<script>
    var subCategoryIndex = 1;
    function AddSubCategory() {
        $(".row").
            append("<div class='image mb-2' id='preview-picture" + subCategoryIndex + "' >" +
                "<label for='image" + subCategoryIndex + "' class='image-upload'></label>" +
                "<input type='file' id='image" + subCategoryIndex + "' class='image-upload' name='Images'/>" +
                "</div>");
        subCategoryIndex++;
    }
</script>

   <script>
        const INPUT_FILE = document.querySelector('#upload-files');
        const INPUT_CONTAINER = document.querySelector('#upload-container');
        const FILES_LIST_CONTAINER = document.querySelector('#files-list-container');
        const FILE_LIST = [];
        let UPLOADED_FILES = [];

        const multipleEvents = (element, eventNames, listener) => {
            const events = eventNames.split(' ');

            events.forEach(event => {
                element.addEventListener(event, listener, false);
            });
        };

        const previewImages = () => {
            FILES_LIST_CONTAINER.innerHTML = '';
            if (FILE_LIST.length > 0) {
                FILE_LIST.forEach((addedFile, index) => {
                    const content = `
        <div class="form__image-container js-remove-image" data-index="${index}">
          <img class="form__image" src="${addedFile.url}" alt="${addedFile.name}">
        </div>
      `;

                    FILES_LIST_CONTAINER.insertAdjacentHTML('beforeEnd', content);
                });
            } else {
                console.log('empty')
                INPUT_FILE.value = "";
            }
        }

        const fileUpload = () => {
            if (FILES_LIST_CONTAINER) {
                multipleEvents(INPUT_FILE, 'click dragstart dragover', () => {
                    INPUT_CONTAINER.classList.add('active');
                });

                multipleEvents(INPUT_FILE, 'dragleave dragend drop change blur', () => {
                    INPUT_CONTAINER.classList.remove('active');
                });

                INPUT_FILE.addEventListener('change', () => {
                    const files = [...INPUT_FILE.files];
                    console.log("changed")
                    files.forEach(file => {
                        const fileURL = URL.createObjectURL(file);
                        const fileName = file.name;
                        if (!file.type.match("image/")) {
                            alert(file.name + " is not an image");
                            console.log(file.type)
                        } else {
                            const uploadedFiles = {
                                name: fileName,
                                url: fileURL,
                            };

                            FILE_LIST.push(uploadedFiles);
                        }
                    });

                    console.log(FILE_LIST)//final list of uploaded files
                    previewImages();
                    UPLOADED_FILES = document.querySelectorAll(".js-remove-image");
                    removeFile();
                });
            }
        };

        const removeFile = () => {
            UPLOADED_FILES = document.querySelectorAll(".js-remove-image");

            if (UPLOADED_FILES) {
                UPLOADED_FILES.forEach(image => {
                    image.addEventListener('click', function () {
                        const fileIndex = this.getAttribute('data-index');

                        FILE_LIST.splice(fileIndex, 1);
                        previewImages();
                        removeFile();
                    });
                });
            } else {
                [...INPUT_FILE.files] = [];
            }
        };

        fileUpload();
        removeFile();
</script>
}